}
}
all_runs
rna_depth_factor
setwd("/Volumes/external_disk/english_lab/TRE-MPRA/runs/19664")
barcodeMap = read_csv("../../barcode_map_data/finalBarcodeMap.csv")
allDataFilteredJoined = read_csv("rna_dna_samples/all_data_filtered.csv")
rnaSamples = read_csv("rna_dna_samples/rna_samples.csv")
dnaSamples = read_csv("rna_dna_samples/dna_samples.csv")
mData = read_csv("./metaData.csv")
run_name = unique(mData$run_name)
allDataFilteredJoined %>%
group_by(treatment) %>%
summarise(n = n()) %>%
select(-n) %>%
mutate(run = RUN_NAME) %>%
mutate(t_id = paste0(run_name,'_t_',row_number())) -> treatment_ids
#Filter
dnaSamples %>%
select(totalCounts, barcode, name)  -> current_dna_samples
current_dna_samples %>%
left_join(barcodeMap, by = "barcode", "name") %>%
mutate(architecture = paste0(motif,":", id,", ", period,", ", spacer,", ", promoter))-> dna_joined
#Get the top 100 (by DNA count) barcodes for each architecture
dna_joined  %>%
group_by(architecture, name) %>%
slice_max(order_by = totalCounts, n = 100,  with_ties = FALSE) -> dna_top
dna_top %>% group_by(architecture, name) %>%
summarise(n = n()) -> expected_n
cbind(dna_top %>%
group_by(architecture, name) %>%
summarise(bc = row_number()), dna_top) %>%
mutate(architecture = architecture...1, name = name...6)%>%
select(-architecture...14,-architecture...1,-occurrence, -name...6,-name...2)-> dna_top
dna_top %>%
select(bc, barcode, totalCounts, architecture, name) %>%
rename(dna_count = totalCounts) -> dna_top
#Join with RNA
rnaSamples %>%
filter(barcode != "TAAATATGCCTCAGCACCCTGCTG", #Get rid of all the spike ins
barcode != "AAGACGCGTCACAGACTTATAGAC",
barcode != "CGGAGACACTTAATAGCCTCTAAC",
barcode != "ATGTTAGTGAGTGTGCGAAGTAGG") %>%
select(barcode, totalCounts, name, treatment) %>%
left_join(barcodeMap, by = "barcode") %>%
mutate(architecture = paste0(motif,":", id,", ", period,", ", spacer,", ", promoter)) %>%
select(architecture, totalCounts, barcode, name, class, treatment) -> rna_joined
only_dna_name = (current_dna_samples)$name %>% unique()
assert(length(only_dna_name)==1)
X2 = unique(rnaSamples$name)
X1 = rep(only_dna_name, length(X2))
dna_sample_map <- data.frame (X1,X2)
left_join(dna_top %>% rename("DNA_name" = name), rna_joined, by = c("barcode", "architecture")) -> mpra_base
# mpra_base$DNA_name = only_dna_name
allDataFilteredJoined %>%
group_by(treatment, name) %>%
summarise(batch = n()) %>%
mutate(j = paste(treatment, name)) -> original_samples
original_samples %>%
group_by(treatment) %>%
summarise(batch = row_number()) -> batchNums
cbind(batchNums, original_samples %>% ungroup() %>% select(-batch, -treatment)) %>%
select(name, treatment, batch) -> batch_info
left_join(mpra_base, batch_info) ->mpra_base
mpra_base %>% filter(!is.na(totalCounts)) -> mpra_base
mpra_base %>%
left_join(treatment_ids) %>%
select(-treatment) %>%
rename(treatment = t_id) -> mpra_base
#Get RNA depth factors
rna_joined %>%
group_by(name, treatment) %>%
summarise(uq = quantile(totalCounts, .75)) %>%
left_join(batch_info) %>%
mutate(norm = uq / first(.$uq)) %>%
select(batch, norm, treatment, uq) %>%
left_join(treatment_ids) %>%
select(-treatment) %>%
rename(treatment = t_id) -> depth_factors
depth_factors %>%
left_join(dna_sample_map, by = c("name" = "X2")) %>%
rename(dna_name = X1) ->  depth_factors
depth_factors
write_csv(depth_factors, paste0(PATH_TO_MPRA_INPUT, "rna_depth.csv"))
#Get DNA depth factors
dnaSamples %>%
group_by(name) %>%
summarise(uq = quantile(totalCounts, .75)) %>%
mutate(norm = uq / first(.$uq))-> dna_depth_factors
dna_depth_factors$run_name = RUN_NAME
write_csv(dna_depth_factors, paste0(PATH_TO_MPRA_INPUT, "dna_depth.csv"))
mpra_base %>%
pivot_wider(values_from = totalCounts, id_cols = architecture, names_from = c(treatment, batch, bc), names_sep = ":") %>%
select(-architecture) %>%
colnames()-> depth_cols
# Get depth columns
rna_depth = c()
dna_depth = c()
for (i in depth_cols){
cur_condition = str_split(i, ":")[[1]][1]
cur_batch = str_split(i, ":")[[1]][2]
cur_sample_name = (depth_factors %>% filter(treatment == cur_condition, batch == cur_batch))$name
cur_dna_sample = (dna_sample_map %>% filter(X2 == cur_sample_name))$X1
cur_dna_depth = as.double((dna_depth_factors %>% filter(name == cur_dna_sample))$norm)
dna_depth = append(dna_depth, cur_dna_depth)
cur_depth_factor = as.double((depth_factors %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$norm)
rna_depth = append(rna_depth, cur_depth_factor)
}
as.data.frame(depth_cols) -> col_ano
col_ano[c('conditions', 'batch', "barcode")] <- str_split_fixed(col_ano$depth_cols, ':', 3)
col_ano <- data.frame(col_ano%>%select(-depth_cols), row.names=col_ano$depth_cols)
col_ano$condition <- as.factor(col_ano$condition)
col_ano =col_ano %>%select(-conditions)
write_csv(col_ano, paste0(PATH_TO_MPRA_INPUT, "col_annotations.csv"))
#RNA
mpra_base %>%
pivot_wider(values_from = totalCounts, id_cols = architecture, names_from = c(treatment, batch, bc), names_sep = ".") -> rna_mat
#DNA
mpra_base %>%
pivot_wider(values_from = dna_count, id_cols = architecture, names_from = c(treatment, batch, bc), names_sep = ".") -> dna_mat
rna_mat[is.na(rna_mat)] <- 0
dna_mat[is.na(dna_mat)] <- 0
write_csv(as.data.frame(rna_depth), paste0(PATH_TO_MPRA_INPUT, "rna_depth_vals.csv"))
write_csv(as.data.frame(dna_depth), paste0(PATH_TO_MPRA_INPUT, "dna_depth_vals.csv"))
write_csv(rna_mat, paste0(PATH_TO_MPRA_INPUT, "rna_counts.csv"))
write_csv(dna_mat, paste0(PATH_TO_MPRA_INPUT, "dna_counts.csv"))
write_csv(treatment_ids, paste0(PATH_TO_MPRA_INPUT, "treatment_id.csv"))
all_runs = unique(c(comps$base_run, comps$stim_run))
rna_counts = data.frame()
dna_counts = data.frame()
treatment_ids = data.frame()
rna_depth_factor = data.frame()
dna_depth_factor = data.frame()
col_ano = data.frame()
# depth_cols = data.frame()
count = 0
for (i in all_runs){
count = count + 1
if (count == 1){ #If its the first iteration, just initialize the dataframe
rna_counts = read_csv(paste0("runs/",i,"/mpra_input/rna_counts.csv"))
dna_counts = read_csv(paste0("runs/",i,"/mpra_input/dna_counts.csv"))
treatment_ids = read_csv(paste0("runs/",i,"/mpra_input/treatment_id.csv"))
rna_depth_factor = read_csv(paste0("runs/",i,"/mpra_input/rna_depth.csv"))
dna_depth_factor = read_csv(paste0("runs/",i,"/mpra_input/dna_depth.csv"))
# depth_cols = read_csv(paste0("runs/",i,"/mpra_input/depth_cols.csv"))
col_ano = read_csv(paste0("runs/",i,"/mpra_input/col_annotations.csv"))
}
else{ #If we are beyond the first iteration, join the data frames
rna_counts = full_join(read_csv(paste0("runs/",i,"/mpra_input/rna_counts.csv")), rna_counts)
dna_counts = full_join(read_csv(paste0("runs/",i,"/mpra_input/dna_counts.csv")), dna_counts)
treatment_ids = rbind(read_csv(paste0("runs/",i,"/mpra_input/treatment_id.csv")), treatment_ids)
rna_depth_factor = rbind(read_csv(paste0("runs/",i,"/mpra_input/rna_depth.csv")), rna_depth_factor)
dna_depth_factor = rbind(read_csv(paste0("runs/",i,"/mpra_input/dna_depth.csv")), dna_depth_factor)
# depth_cols = rbind(read_csv(paste0("runs/",i,"/mpra_input/depth_cols.csv")), depth_cols)
col_ano = rbind(read_csv(paste0("runs/",i,"/mpra_input/col_annotations.csv")), col_ano)
}
}
getwd()
setwd("/Volumes/external_disk/english_lab/TRE-MPRA/")
all_runs = unique(c(comps$base_run, comps$stim_run))
rna_counts = data.frame()
dna_counts = data.frame()
treatment_ids = data.frame()
rna_depth_factor = data.frame()
dna_depth_factor = data.frame()
col_ano = data.frame()
# depth_cols = data.frame()
count = 0
for (i in all_runs){
count = count + 1
if (count == 1){ #If its the first iteration, just initialize the dataframe
rna_counts = read_csv(paste0("runs/",i,"/mpra_input/rna_counts.csv"))
dna_counts = read_csv(paste0("runs/",i,"/mpra_input/dna_counts.csv"))
treatment_ids = read_csv(paste0("runs/",i,"/mpra_input/treatment_id.csv"))
rna_depth_factor = read_csv(paste0("runs/",i,"/mpra_input/rna_depth.csv"))
dna_depth_factor = read_csv(paste0("runs/",i,"/mpra_input/dna_depth.csv"))
# depth_cols = read_csv(paste0("runs/",i,"/mpra_input/depth_cols.csv"))
col_ano = read_csv(paste0("runs/",i,"/mpra_input/col_annotations.csv"))
}
else{ #If we are beyond the first iteration, join the data frames
rna_counts = full_join(read_csv(paste0("runs/",i,"/mpra_input/rna_counts.csv")), rna_counts)
dna_counts = full_join(read_csv(paste0("runs/",i,"/mpra_input/dna_counts.csv")), dna_counts)
treatment_ids = rbind(read_csv(paste0("runs/",i,"/mpra_input/treatment_id.csv")), treatment_ids)
rna_depth_factor = rbind(read_csv(paste0("runs/",i,"/mpra_input/rna_depth.csv")), rna_depth_factor)
dna_depth_factor = rbind(read_csv(paste0("runs/",i,"/mpra_input/dna_depth.csv")), dna_depth_factor)
# depth_cols = rbind(read_csv(paste0("runs/",i,"/mpra_input/depth_cols.csv")), depth_cols)
col_ano = rbind(read_csv(paste0("runs/",i,"/mpra_input/col_annotations.csv")), col_ano)
}
}
rna_depth_factor
depth_factors
RUN_NAME
setwd("/Volumes/external_disk/english_lab/TRE-MPRA/runs/19664")
RUN_NAME = unique(mData$run_name)
RUN_NAME
run_name = unique(mData$run_name)
allDataFilteredJoined %>%
group_by(treatment) %>%
summarise(n = n()) %>%
select(-n) %>%
mutate(run = RUN_NAME) %>%
mutate(t_id = paste0(run_name,'_t_',row_number())) -> treatment_ids
#Filter
dnaSamples %>%
select(totalCounts, barcode, name)  -> current_dna_samples
current_dna_samples %>%
left_join(barcodeMap, by = "barcode", "name") %>%
mutate(architecture = paste0(motif,":", id,", ", period,", ", spacer,", ", promoter))-> dna_joined
#Get the top 100 (by DNA count) barcodes for each architecture
dna_joined  %>%
group_by(architecture, name) %>%
slice_max(order_by = totalCounts, n = 100,  with_ties = FALSE) -> dna_top
dna_top %>% group_by(architecture, name) %>%
summarise(n = n()) -> expected_n
cbind(dna_top %>%
group_by(architecture, name) %>%
summarise(bc = row_number()), dna_top) %>%
mutate(architecture = architecture...1, name = name...6)%>%
select(-architecture...14,-architecture...1,-occurrence, -name...6,-name...2)-> dna_top
dna_top %>%
select(bc, barcode, totalCounts, architecture, name) %>%
rename(dna_count = totalCounts) -> dna_top
#Join with RNA
rnaSamples %>%
filter(barcode != "TAAATATGCCTCAGCACCCTGCTG", #Get rid of all the spike ins
barcode != "AAGACGCGTCACAGACTTATAGAC",
barcode != "CGGAGACACTTAATAGCCTCTAAC",
barcode != "ATGTTAGTGAGTGTGCGAAGTAGG") %>%
select(barcode, totalCounts, name, treatment) %>%
left_join(barcodeMap, by = "barcode") %>%
mutate(architecture = paste0(motif,":", id,", ", period,", ", spacer,", ", promoter)) %>%
select(architecture, totalCounts, barcode, name, class, treatment) -> rna_joined
only_dna_name = (current_dna_samples)$name %>% unique()
assert(length(only_dna_name)==1)
X2 = unique(rnaSamples$name)
X1 = rep(only_dna_name, length(X2))
dna_sample_map <- data.frame (X1,X2)
left_join(dna_top %>% rename("DNA_name" = name), rna_joined, by = c("barcode", "architecture")) -> mpra_base
allDataFilteredJoined %>%
group_by(treatment, name) %>%
summarise(batch = n()) %>%
mutate(j = paste(treatment, name)) -> original_samples
original_samples %>%
group_by(treatment) %>%
summarise(batch = row_number()) -> batchNums
cbind(batchNums, original_samples %>% ungroup() %>% select(-batch, -treatment)) %>%
select(name, treatment, batch) -> batch_info
left_join(mpra_base, batch_info) ->mpra_base
mpra_base %>% filter(!is.na(totalCounts)) -> mpra_base
mpra_base %>%
left_join(treatment_ids) %>%
select(-treatment) %>%
rename(treatment = t_id) -> mpra_base
#Get RNA depth factors
rna_joined %>%
group_by(name, treatment) %>%
summarise(uq = quantile(totalCounts, .75)) %>%
left_join(batch_info) %>%
mutate(norm = uq / first(.$uq)) %>%
select(batch, norm, treatment, uq) %>%
left_join(treatment_ids) %>%
select(-treatment) %>%
rename(treatment = t_id) -> depth_factors
depth_factors %>%
left_join(dna_sample_map, by = c("name" = "X2")) %>%
rename(dna_name = X1) ->  depth_factors
depth_factors
write_csv(depth_factors, paste0(PATH_TO_MPRA_INPUT, "rna_depth.csv"))
#Get DNA depth factors
dnaSamples %>%
group_by(name) %>%
summarise(uq = quantile(totalCounts, .75)) %>%
mutate(norm = uq / first(.$uq))-> dna_depth_factors
dna_depth_factors$run_name = RUN_NAME
write_csv(dna_depth_factors, paste0(PATH_TO_MPRA_INPUT, "dna_depth.csv"))
mpra_base %>%
pivot_wider(values_from = totalCounts, id_cols = architecture, names_from = c(treatment, batch, bc), names_sep = ":") %>%
select(-architecture) %>%
colnames()-> depth_cols
# Get depth columns
rna_depth = c()
dna_depth = c()
for (i in depth_cols){
cur_condition = str_split(i, ":")[[1]][1]
cur_batch = str_split(i, ":")[[1]][2]
cur_sample_name = (depth_factors %>% filter(treatment == cur_condition, batch == cur_batch))$name
cur_dna_sample = (dna_sample_map %>% filter(X2 == cur_sample_name))$X1
cur_dna_depth = as.double((dna_depth_factors %>% filter(name == cur_dna_sample))$norm)
dna_depth = append(dna_depth, cur_dna_depth)
cur_depth_factor = as.double((depth_factors %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$norm)
rna_depth = append(rna_depth, cur_depth_factor)
}
as.data.frame(depth_cols) -> col_ano
col_ano[c('conditions', 'batch', "barcode")] <- str_split_fixed(col_ano$depth_cols, ':', 3)
col_ano <- data.frame(col_ano%>%select(-depth_cols), row.names=col_ano$depth_cols)
col_ano$condition <- as.factor(col_ano$condition)
col_ano =col_ano %>%select(-conditions)
write_csv(col_ano, paste0(PATH_TO_MPRA_INPUT, "col_annotations.csv"))
#RNA
mpra_base %>%
pivot_wider(values_from = totalCounts, id_cols = architecture, names_from = c(treatment, batch, bc), names_sep = ".") -> rna_mat
#DNA
mpra_base %>%
pivot_wider(values_from = dna_count, id_cols = architecture, names_from = c(treatment, batch, bc), names_sep = ".") -> dna_mat
rna_mat[is.na(rna_mat)] <- 0
dna_mat[is.na(dna_mat)] <- 0
write_csv(as.data.frame(rna_depth), paste0(PATH_TO_MPRA_INPUT, "rna_depth_vals.csv"))
write_csv(as.data.frame(dna_depth), paste0(PATH_TO_MPRA_INPUT, "dna_depth_vals.csv"))
write_csv(rna_mat, paste0(PATH_TO_MPRA_INPUT, "rna_counts.csv"))
write_csv(dna_mat, paste0(PATH_TO_MPRA_INPUT, "dna_counts.csv"))
write_csv(treatment_ids, paste0(PATH_TO_MPRA_INPUT, "treatment_id.csv"))
getwd()
setwd("/Volumes/external_disk/english_lab/TRE-MPRA/")
all_runs = unique(c(comps$base_run, comps$stim_run))
rna_counts = data.frame()
dna_counts = data.frame()
treatment_ids = data.frame()
rna_depth_factor = data.frame()
dna_depth_factor = data.frame()
col_ano = data.frame()
# depth_cols = data.frame()
count = 0
for (i in all_runs){
count = count + 1
if (count == 1){ #If its the first iteration, just initialize the dataframe
rna_counts = read_csv(paste0("runs/",i,"/mpra_input/rna_counts.csv"))
dna_counts = read_csv(paste0("runs/",i,"/mpra_input/dna_counts.csv"))
treatment_ids = read_csv(paste0("runs/",i,"/mpra_input/treatment_id.csv"))
rna_depth_factor = read_csv(paste0("runs/",i,"/mpra_input/rna_depth.csv"))
dna_depth_factor = read_csv(paste0("runs/",i,"/mpra_input/dna_depth.csv"))
# depth_cols = read_csv(paste0("runs/",i,"/mpra_input/depth_cols.csv"))
col_ano = read_csv(paste0("runs/",i,"/mpra_input/col_annotations.csv"))
}
else{ #If we are beyond the first iteration, join the data frames
rna_counts = full_join(read_csv(paste0("runs/",i,"/mpra_input/rna_counts.csv")), rna_counts)
dna_counts = full_join(read_csv(paste0("runs/",i,"/mpra_input/dna_counts.csv")), dna_counts)
treatment_ids = rbind(read_csv(paste0("runs/",i,"/mpra_input/treatment_id.csv")), treatment_ids)
rna_depth_factor = rbind(read_csv(paste0("runs/",i,"/mpra_input/rna_depth.csv")), rna_depth_factor)
dna_depth_factor = rbind(read_csv(paste0("runs/",i,"/mpra_input/dna_depth.csv")), dna_depth_factor)
# depth_cols = rbind(read_csv(paste0("runs/",i,"/mpra_input/depth_cols.csv")), depth_cols)
col_ano = rbind(read_csv(paste0("runs/",i,"/mpra_input/col_annotations.csv")), col_ano)
}
}
rna_depth_factor
id_iter = 1
comps %>%
filter(id == id_iter) -> cur_row
base_treatment = cur_row$base_treatment
base_run = cur_row$base_run
stim_treatment = cur_row$stim_treatment
stim_run = cur_row$stim_run
base_t_id = (treatment_ids %>% filter(run == base_run, treatment == base_treatment))$t_id
stim_t_id = (treatment_ids %>% filter(run == stim_run, treatment == stim_treatment))$t_id
regex = paste0(base_t_id,"\\.|",stim_t_id,"\\.")
name_csv = paste0(base_run, "_", base_treatment,"_vs_",stim_run, "_", stim_treatment)
name_csv = gsub(' ','_',name_csv)
grep(regex, colnames(rna_counts)) -> split_indices
cur_depth_cols <- colnames(rna_counts[split_indices])
# Get depth columns
rna_depth = c()
dna_depth = c()
cur_depth_cols
19664_t_2.1.57
i = "19664_t_2.1.57"
cur_run = str_split(i, "_",  n = 2)[[1]][1]
sample_batch_info = str_split(i, "_",  n = 2)[[1]][2]
cur_condition = str_split(i, "\\.", n = 2)[[1]][1]
cur_batch = str_split(sample_batch_info, "\\.")[[1]][2]
cur_rna_depth = as.double((rna_depth_factor %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$norm)
rna_depth_factor %>%
filter(treatment == cur_condition, batch == as.character(cur_batch))
cur_dna_name = as.double((rna_depth_factor %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$dna_name)
cur_dna_name = (rna_depth_factor %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$dna_name
cur_dna_name
rna_depth = c(rna_depth, cur_rna_depth)
dna_depth_factor
rna_depth = c()
dna_depth = c()
for (i in cur_depth_cols){
cur_run = str_split(i, "_",  n = 2)[[1]][1]
sample_batch_info = str_split(i, "_",  n = 2)[[1]][2]
cur_condition = str_split(i, "\\.", n = 2)[[1]][1]
cur_batch = str_split(sample_batch_info, "\\.")[[1]][2]
cur_rna_depth = as.double((rna_depth_factor %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$norm)
cur_dna_name = (rna_depth_factor %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$dna_name
rna_depth = c(rna_depth, cur_rna_depth)
cur_dna_depth =  (dna_depth_factor %>% filter(run_name == cur_run, name == cur_dna_name))$norm
dna_depth = c(dna_depth, cur_dna_depth)
}
dna_depth
dna_depth_factor
dna_depth_factor %>%
mutate(norm = uq / first(.$uq)) -> dna_depth_factor
dna_depth_factor
comps
rna_counts = data.frame()
dna_counts = data.frame()
treatment_ids = data.frame()
rna_depth_factor = data.frame()
dna_depth_factor = data.frame()
col_ano = data.frame()
# depth_cols = data.frame()
count = 0
for (i in all_runs){
count = count + 1
if (count == 1){ #If its the first iteration, just initialize the dataframe
rna_counts = read_csv(paste0("runs/",i,"/mpra_input/rna_counts.csv"))
dna_counts = read_csv(paste0("runs/",i,"/mpra_input/dna_counts.csv"))
treatment_ids = read_csv(paste0("runs/",i,"/mpra_input/treatment_id.csv"))
rna_depth_factor = read_csv(paste0("runs/",i,"/mpra_input/rna_depth.csv"))
dna_depth_factor = read_csv(paste0("runs/",i,"/mpra_input/dna_depth.csv"))
# depth_cols = read_csv(paste0("runs/",i,"/mpra_input/depth_cols.csv"))
col_ano = read_csv(paste0("runs/",i,"/mpra_input/col_annotations.csv"))
}
else{ #If we are beyond the first iteration, join the data frames
rna_counts = full_join(read_csv(paste0("runs/",i,"/mpra_input/rna_counts.csv")), rna_counts)
dna_counts = full_join(read_csv(paste0("runs/",i,"/mpra_input/dna_counts.csv")), dna_counts)
treatment_ids = rbind(read_csv(paste0("runs/",i,"/mpra_input/treatment_id.csv")), treatment_ids)
rna_depth_factor = rbind(read_csv(paste0("runs/",i,"/mpra_input/rna_depth.csv")), rna_depth_factor)
dna_depth_factor = rbind(read_csv(paste0("runs/",i,"/mpra_input/dna_depth.csv")), dna_depth_factor)
# depth_cols = rbind(read_csv(paste0("runs/",i,"/mpra_input/depth_cols.csv")), depth_cols)
col_ano = rbind(read_csv(paste0("runs/",i,"/mpra_input/col_annotations.csv")), col_ano)
}
}
#Re-calculate the RNA and DNA depth factors now that we've combined
rna_depth_factor %>%
mutate(norm = uq / first(.$uq)) -> rna_depth_factor
dna_depth_factor %>%
mutate(norm = uq / first(.$uq)) -> dna_depth_factor
#Get bool vector of if each row is a control
controls = grepl('^Spacer|^Scramble', rna_counts$architecture)
stopifnot(nrow(dna_counts) == nrow(rna_counts))
architecture_order = dna_counts$architecture
#Configure the row names
dna_counts %>% remove_rownames %>% column_to_rownames(var="architecture") -> dna_counts
rna_counts %>% remove_rownames %>% column_to_rownames(var="architecture") -> rna_counts
for (id_iter in comps$id){
comps %>%
filter(id == id_iter) -> cur_row
base_treatment = cur_row$base_treatment
base_run = cur_row$base_run
stim_treatment = cur_row$stim_treatment
stim_run = cur_row$stim_run
base_t_id = (treatment_ids %>% filter(run == base_run, treatment == base_treatment))$t_id
stim_t_id = (treatment_ids %>% filter(run == stim_run, treatment == stim_treatment))$t_id
regex = paste0(base_t_id,"\\.|",stim_t_id,"\\.")
name_csv = paste0(base_run, "_", base_treatment,"_vs_",stim_run, "_", stim_treatment)
name_csv = gsub(' ','_',name_csv)
grep(regex, colnames(rna_counts)) -> split_indices
cur_depth_cols <- colnames(rna_counts[split_indices])
# Get depth columns
rna_depth = c()
dna_depth = c()
for (i in cur_depth_cols){
cur_run = str_split(i, "_",  n = 2)[[1]][1]
sample_batch_info = str_split(i, "_",  n = 2)[[1]][2]
cur_condition = str_split(i, "\\.", n = 2)[[1]][1]
cur_batch = str_split(sample_batch_info, "\\.")[[1]][2]
cur_rna_depth = as.double((rna_depth_factor %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$norm)
cur_dna_name = (rna_depth_factor %>%
filter(treatment == cur_condition, batch == as.character(cur_batch)))$dna_name
rna_depth = c(rna_depth, cur_rna_depth)
cur_dna_depth =  (dna_depth_factor %>% filter(run_name == cur_run, name == cur_dna_name))$norm
dna_depth = c(dna_depth, cur_dna_depth)
}
as.data.frame(cur_depth_cols) -> new_col_ano
new_col_ano[c('conditions', 'batch', "barcode")] <- str_split_fixed(new_col_ano$cur_depth_cols, '\\.', 3)
new_col_ano <- data.frame(new_col_ano%>%select(-cur_depth_cols), row.names=new_col_ano$cur_depth_cols)
new_col_ano$condition <- as.factor(new_col_ano$condition)
new_col_ano$condition <- relevel(new_col_ano$condition, base_t_id) #The condition must be a factor with
new_col_ano=new_col_ano %>%select(-conditions)
complete_obj <- MpraObject(dnaCounts = as.matrix(dna_counts[split_indices]),
rnaCounts = as.matrix(rna_counts[split_indices]),
dnaAnnot = as.data.frame(new_col_ano),
rnaAnnot = as.data.frame(new_col_ano),
controls = controls)
#We will have to fix this to get the dna depth for two comparisons..
complete_obj = setDepthFactors(complete_obj, dnaDepth = dna_depth, rnaDepth = rna_depth)
if (length(unique(new_col_ano$batch)) > 1){ #If more than one batch is present us it in comparative
comp_obj <- analyzeComparative(obj = complete_obj,
dnaDesign = ~ barcode + batch + condition,
rnaDesign = ~ condition,
reducedDesign = ~ 1,
BPPARAM = param)
} else{
comp_obj <- analyzeComparative(obj = complete_obj,
dnaDesign = ~ barcode + condition,
rnaDesign = ~ condition,
reducedDesign = ~ 1,
BPPARAM = param)
}
res <- testLrt(comp_obj)
res$architecture = row.names(res)
write_csv(res, paste0(name_csv,'.csv'))
}
write_csv(res, paste0(RESULTS_DIR, name_csv,'.csv'))
RESULTS_DIR = "pairwise_results/"
write_csv(res, paste0(RESULTS_DIR, name_csv,'.csv'))
View(res)
name_csv = paste0(base_run, "-", base_treatment,"_vs_",stim_run, "-", stim_treatment)
name_csv = gsub(' ','_',name_csv)
name_csv = paste0(base_run, "-", base_treatment,"_vs_",stim_run, "-", stim_treatment)
name_csv = gsub(' ','_',name_csv)
write_csv(res, paste0(RESULTS_DIR, name_csv,'.csv'))
